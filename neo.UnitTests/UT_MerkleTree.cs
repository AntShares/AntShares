
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Neo.Cryptography;
using System.Linq;

namespace Neo.UnitTests
{
    [TestClass]
    public class UT_MerkleTree
    {
        [TestMethod]
        public void TestMerkleProve()
        {
            var path = "ef20c77c7c758f065cf00d9e9de11a220cf6c0debdb22dfba7511faaf136ce67724f020000000000000020000000000000000000000000000000000000000000000000000000000000000a20126a8bb1932803a2dbf3ae1344b41c5130ad199d8550f6d90e874faebdb3ad41145e43a235a4c63a897372a12f34dbe569759bb4c5030000000000000014eddceb99f62cf23b9c4ca91942ffbdb8b555db5006756e6c6f636b4a14000000000000000000000000000000000000000214311cacf114462999700b9308f16885819bffb4ea0065cd1d00000000000000000000000000000000000000000000000000000000".HexToBytes();
            var root = "bf11cdb786310e6a665d3cd5f05afbb3b999e7fa7c27d445f03048959a8c7b5c".HexToBytes();
            var result = MerkleTree.MerkleProve(path, new UInt256(root));
            Assert.AreEqual("20c77c7c758f065cf00d9e9de11a220cf6c0debdb22dfba7511faaf136ce67724f020000000000000020000000000000000000000000000000000000000000000000000000000000000a20126a8bb1932803a2dbf3ae1344b41c5130ad199d8550f6d90e874faebdb3ad41145e43a235a4c63a897372a12f34dbe569759bb4c5030000000000000014eddceb99f62cf23b9c4ca91942ffbdb8b555db5006756e6c6f636b4a14000000000000000000000000000000000000000214311cacf114462999700b9308f16885819bffb4ea0065cd1d00000000000000000000000000000000000000000000000000000000", result.ToHexString());
            Assert.IsTrue(MerkleTree.ByteArrayEquals(root, new byte[]{0}.Concat(path.Skip(1)).Sha256()));
        }
    }
}
